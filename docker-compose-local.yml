version: "3.5"

# EXECUTAR COM O SEGUINTE COMANDO:
# mvn -B package -Pprod -DskipTests
# docker compose up -d --build
# docker compose down -v --rmi local

services:
  api01: &api # API - Instância 01
    build:
      context: .
      dockerfile: Dockerfile
    hostname: api01
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail http://localhost:8080/actuator/health | jq --exit-status -n 'inputs | if has(\"status\") then .status==\"UP\" else false end' > /dev/null || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 10
      start_period: 60s
    expose:
      - "8080"
    ports:
      - "8081:8080"
    ulimits:
      nproc: 1000000
      nofile:
        soft: 1000000
        hard: 1000000
    environment: &envvars
      INSTANCIA_ROLE: "principal"
      # JDK_JAVA_OPTIONS: "-server -ea -XX:+UseContainerSupport -XX:MaxRAMPercentage=85 -XX:+UseCompressedClassPointers -XX:+UseZGC -XX:+ZUncommit -XX:+UseDynamicNumberOfGCThreads -XX:-OmitStackTraceInFastThrow -XX:+OptimizeStringConcat"
      # VER https://stackoverflow.com/questions/44491257/how-to-reduce-spring-boot-memory-usage
      JDK_JAVA_OPTIONS: "-server -ea -XX:MaxRAM=150M -XX:+UseContainerSupport -XX:+UseSerialGC"
      DB_URL: "jdbc:postgresql://db:5432/rinha2"
      DB_USER: "rinha_user"
      DB_PWD: "rinha_pwd"
      DB_POOL_INITIAL_SIZE: "40"
      DB_POOL_MAX_SIZE: "40"
      JPA_GENERATE_SCHEMA: "true"
      HIBERNATE_DDL_AUTO: "create"
    deploy:
      resources:
        limits:
          cpus: "0.4"
          memory: "150MB"

  api02:
    # Essa sintaxe reusa o que foi declarado em 'api01'.
    <<: *api
    hostname: api02
    expose:
      - "8080"
    ports:
      - "8082:8080"
    environment:
      <<: *envvars
      INSTANCIA_ROLE: "secundaria"
      JPA_GENERATE_SCHEMA: "false"
      HIBERNATE_DDL_AUTO: "none"

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      api01:
        condition: service_healthy
      api02:
        condition: service_healthy
    ports:
        # Obrigatório expor/usar a porta 9999 no load balancer!
      - "9999:9999"
    ulimits:
      nproc: 1000000
      nofile:
        soft: 1000000
        hard: 1000000
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "50MB"

  db:
    image: postgres:latest
    hostname: db
    environment:
      - POSTGRES_DB=rinha2
      - POSTGRES_PASSWORD=rinha_pwd
      - POSTGRES_USER=rinha_user
    ports:
      - "5432:5432"
#    volumes:
#      - ./script.sql:/docker-entrypoint-initdb.d/script.sql
    ulimits:
      nproc: 1000000
      nofile:
        soft: 1000000
        hard: 1000000
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d rinha2 -U rinha_user"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s
    deploy:
      resources:
        limits:
          # Note que a soma de todos os limites dos serviços
          # aqui declarados é de 1.5 unidades de CPU e 550MB
          # de memória. A distribuição feita aqui é apenas
          # um exemplo - distribua como quiser.
          cpus: "0.5"
          memory: "200MB"

# O uso do modo `bridge` deve ser adequado à carga que será usada no teste.
# A edição anterior se beneficiou do modo host pois o volume de requisições
# era relativamente alto e a virtualização da rede se tornou um gargalo, mas
# este modo é mais complexo de ser configurado. Fique à vontade para usar o
# modo que quiser desde que não conflite com portas trivialmente usadas em um
# SO.
networks:
  default:
    driver: bridge
    name: rinhanet
